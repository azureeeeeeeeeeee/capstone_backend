openapi: 3.0.4
info:
  title: Tracer Study - API Specification
  description: |-
    Ini adalah API specification untuk aplikasi tracer study capstone kelompok 8 Informatika ITK

paths:
  /roles:
    get:
      tags:
        - roles
      summary: Get all roles
      operationId: getRoles
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - roles
      summary: Create a role
      operationId: createRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleInput'
      responses:
        '201':
          description: Role created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
  
  /roles/{id}:
    get:
      tags:
        - roles
      summary: Get role by ID
      operationId: getRoleById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '404':
          description: Role not found
    put:
      tags:
        - roles
      summary: Update role
      operationId: updateRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleInput'
      responses:
        '200':
          description: Role updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    delete:
      tags:
        - roles
      summary: Delete role
      operationId: deleteRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Role deleted

  /users:
    get:
      tags:
        - users
      summary: Get all users
      operationId: getUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - users
      summary: Create a user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  
  /users/{nim_nip}:
    get:
      tags:
        - users
      summary: Get user by ID
      operationId: getUserById
      parameters:
        - name: nim_nip
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      tags:
        - users
      summary: Update user
      operationId: updateUser
      parameters:
        - name: nim_nip
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - users
      summary: Delete user
      operationId: deleteUser
      parameters:
        - name: nim_nip
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted

  /categories:
    get:
      tags:
        - categories
      summary: Get all categories
      operationId: getCategories
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      tags:
        - categories
      summary: Create category
      operationId: createCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

  /categories/{id}:
    get:
      tags:
        - categories
      summary: Get category by ID
      operationId: getCategoryById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
    put:
      tags:
        - categories
      summary: Update category
      operationId: updateCategory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '200':
          description: Category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
    delete:
      tags:
        - categories
      summary: Delete category
      operationId: deleteCategory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Category deleted

  /questions:
    get:
      tags:
        - questions
      summary: Get all questions
      operationId: getQuestions
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
    post:
      tags:
        - questions
      summary: Create question
      operationId: createQuestion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionInput'
      responses:
        '201':
          description: Question created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'

  /questions/{id}:
    get:
      tags:
        - questions
      summary: Get question by ID
      operationId: getQuestionById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '404':
          description: Question not found
    put:
      tags:
        - questions
      summary: Update question
      operationId: updateQuestion
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionInput'
      responses:
        '200':
          description: Question updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
    delete:
      tags:
        - questions
      summary: Delete question
      operationId: deleteQuestion
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Question deleted

  /answers:
    get:
      tags:
        - answers
      summary: Get all answers
      operationId: getAnswers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Answer'
    post:
      tags:
        - answers
      summary: Create answer
      operationId: createAnswer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerInput'
      responses:
        '201':
          description: Answer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'

  /answers/{id}:
    get:
      tags:
        - answers
      summary: Get answer by ID
      operationId: getAnswerById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
        '404':
          description: Answer not found
    put:
      tags:
        - answers
      summary: Update answer
      operationId: updateAnswer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerInput'
      responses:
        '200':
          description: Answer updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
    delete:
      tags:
        - answers
      summary: Delete answer
      operationId: deleteAnswer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Answer deleted

components:
  schemas:
    Role:
      type: object
      properties:
        id:
          type: integer
        role:
          type: string
    RoleInput:
      type: object
      required:
        - role
      properties:
        role:
          type: string
    User:
      type: object
      properties:
        nim_nip:
          type: integer
        role:
          type: integer
        name:
          type: string
        address:
          type: string
        no_hp:
          type: string
    UserInput:
      type: object
      required:
        - nim_nip
        - role
        - name
        - address
        - no_hp
      properties:
        nim_nip:
          type: integer
        role:
          type: integer
        name:
          type: string
        address:
          type: string
        no_hp:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
        category:
          type: string
    CategoryInput:
      type: object
      required:
        - category
      properties:
        category:
          type: string
    Question:
      type: object
      properties:
        id:
          type: integer
        category:
          type: integer
        question:
          type: string
    QuestionInput:
      type: object
      required:
        - category
        - question
      properties:
        category:
          type: integer
        question:
          type: string
    Answer:
      type: object
      properties:
        id:
          type: integer
        user:
          type: integer
          nullable: true
        question:
          type: integer
        answer:
          type: string
    AnswerInput:
      type: object
      required:
        - question
        - answer
      properties:
        user:
          type: integer
          nullable: true
        question:
          type: integer
        answer:
          type: string
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
